[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bill of Lading",
  "enabled": 0,
  "modified": "2024-09-24 12:50:48.253515",
  "module": "SMK HRMS",
  "name": "Bill of Lading Template",
  "script": "frappe.ui.form.on('Bill of Lading', {\n   template: function(frm) {\n        erpnext.utils.get_terms(cur_frm.doc.template, frm.doc, function(r) {\n            if (!r.exc) {\n                frappe.model.set_value(frm.doctype, frm.docname, \"terms_and_conditions\", r.message);\n            }\n        });\n    },\n   after_save: function(frm) {\n        erpnext.utils.get_terms(cur_frm.doc.template, frm.doc, function(r) {\n            if (!r.exc) {\n                frappe.model.set_value(frm.doctype, frm.docname, \"terms_and_conditions\", r.message);\n            }\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-09-24 12:50:48.182937",
  "module": "SMK HRMS",
  "name": "Set Employee Number based on Employee",
  "script": "frappe.ui.form.on('Employee', {\n\temployee:function(frm) {\n\t\tvar emp = frm.doc.employee;\n\t\t\n\t\tfrm.set_value('employee_number', emp);\n\t\tfrm.refresh_field('employee_number');\n\t},\n\tbefore_save:function(frm){\n\t    var emp = frm.doc.employee;\n\t    \n\t    frm.set_value('employee_number', emp);\n\t\tfrm.refresh_field('employee_number');\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Applicant",
  "enabled": 1,
  "modified": "2024-09-25 15:44:47.311884",
  "module": "SMK HRMS",
  "name": "Fetch designation while selecting job opening",
  "script": "frappe.ui.form.on('Job Applicant', {\n    job_title: function (frm) {\n        var job_title = frm.doc.job_title;\n        if (job_title) {\n            frappe.db.get_value('Job Opening', job_title, 'designation')\n            .then(function(r) { // Corrected this line\n                var desi = r.message.designation;\n                frm.set_value('designation', desi);\n                frm.refresh_field('designation');\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Profile",
  "enabled": 1,
  "modified": "2024-10-08 17:50:27.031409",
  "module": "SMK HRMS",
  "name": "Update Employee master from employee profile",
  "script": "frappe.ui.form.on('Employee Profile', {\n    aadhaar_no: function(frm) {\n        frm.set_value('copy_of_aadhaar', '');\n        frm.refresh_field('copy_of_aadhaar');\n    },\n    before_save: function(frm) {\n       \n        var state = frm.doc.workflow_state;\n\n        if (!frappe.user_roles.includes('HR Manager')) {\n        \n           \n            if (state === 'Approved' || state === 'Rejected') {\n                frm.set_value('workflow_state', 'In Review');\n                frm.refresh_field('workflow_state');\n            }\n        }\n        \n        \n    },\n    // after_save: function(frm) {\n    //     var state = frm.doc.workflow_state;\n        \n    //     if (!frappe.user_roles.includes('HR Manager')) {\n    //         console.log('Current State:', state); \n    \n    //         if (state === 'Pending') {\n               \n    //             frm.disable_form();\n    //         } \n    //         if (state === 'Approved') {\n    //             frm.refresh_field('workflow_state');\n    //         }\n    //     } \n      \n    // },\n    refresh:function(frm){\n        var state = frm.doc.workflow_state;\n        \n    },\n    after_workflow_action: function(frm){\n        var state = frm.doc.workflow_state;\n        if (state === 'Approved') {\n            update_employee_profile(frm);\n        }\n    }\n});\n\n\n\nfunction update_employee_profile(frm) {\n    var state = frm.doc.workflow_state;\n    \n    if (frappe.user_roles.includes('HR Manager')) {\n        if (state === 'Approved') {\n            console.log(\"Status is changed to\", state);\n          \n            frappe.call({\n                method: 'update_employee', \n                args: {\n                    \"name\": frm.doc.name\n                    // freeze: true,\n                    // freeze_message: \"Please wait ..\"\n                },\n                \n                callback: function(response) {\n                    if (response.message) {\n                        console.log(\"Update successful:\", response.message);\n                        frappe.show_alert({ message: 'Employee cell numbers updated successfully!', indicator: 'green' });\n                    } else {\n                        frappe.show_alert({ message: 'No updates made.', indicator: 'orange' });\n                    }\n                },\n                error: function(err) {\n                    console.error('Error while updating:', err);\n                    frappe.show_alert({ message: 'Failed to update cell numbers.', indicator: 'red' });\n                }\n            });\n        }\n    }\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Full and Final Statement",
  "enabled": 1,
  "modified": "2024-10-15 10:13:17.123313",
  "module": "SMK HRMS",
  "name": "Set payables and receivabled in F&F",
  "script": "frappe.ui.form.on('Full and Final Statement', {\n\temployee: function(frm) {\n    \n        var notice_days = frm.doc.custom_notice_days;\n        var rel_date = frm.doc.relieving_date;\n        var last_present_days = frm.doc.custom_last_present_date;\n        \n        \n        if(rel_date && last_present_days && last_present_days<rel_date){\n            var date_diff = frappe.datetime.get_day_diff(rel_date, last_present_days);\n            \n            \n            frm.set_value('custom_unserved_notice_days', date_diff);\n            frm.refresh_field('custom_unserved_notice_days');\n        }\n        \n        var payables = ['Salary Slip', 'Gratuity', 'Bonus', 'Leave Encashment'];\n        var payables_doctype = ['Salary Slip', 'Employee Gratuity', 'Retention Bonus', 'Leave Encashment'];\n        var receivables = ['Loan', 'Advance'];\n        var receivables_doctype = ['Loan', 'Employee Advance'];\n\n        \n        frm.clear_table('payables'); \n        frm.clear_table('receivables'); \n        frm.clear_table(\"custom_asset_allocation\");\n\n        \n        payables.forEach(function(item, index) {\n            var row = frm.add_child('payables'); \n            row.component = item; \n            row.reference_document_type = payables_doctype[index]; \n        });\n\n        \n        receivables.forEach(function(item, index) {\n            var row = frm.add_child('receivables'); \n            row.component = item; \n            row.reference_document_type = receivables_doctype[index]; \n        });\n\n        \n        if (frm.doc.custom_unserved_notice_days > 0) {\n           \n            frappe.db.get_value('Employee', frm.doc.employee, 'custom_gross_salary')\n            .then(function(r) {\n                var gross = r.message.custom_gross_salary;\n                var per_day_dedu = gross / notice_days;\n                var notice_dedu = frm.doc.custom_unserved_notice_days * per_day_dedu;\n                console.log(per_day_dedu);\n                \n                var new_row = frm.add_child('receivables');\n                new_row.component = 'Notice Period Deduction';\n                new_row.amount = notice_dedu;\n                \n                frm.refresh_field('receivables');\n                \n            });\n        }\n\n        \n        frm.refresh_field('payables'); \n        frm.refresh_field('receivables'); \n        \n        // if (frm.doc.employee){\n        //     frappe.call({\n        //         method: \"frappe.client.get\",\n        //         args: {\n        //             doctype: \"Employee\",\n        //             name: frm.doc.employee,\n        //             filters: {\n        //                 fields: [\"custom_allocated_asset_employee\"]\n        //             }\n        //         },\n        //         callback: function(response) {\n        //             if(response.message) {\n                        \n        //                 $.each(response.message.custom_allocated_asset_employee || [], function(i, row) {\n                            \n        //                     let new_row = frm.add_child(\"custom_asset_allocation\");\n        //                     new_row.asset = row.asset; \n        //                     new_row.department = row.department;\n        //                     new_row.model_no = row.model_no; \n        //                     new_row.status = row.status; \n        //                     new_row.allocation_date = row.allocation_date;\n        //                     new_row.returned_date = row.returned_date;\n        //                 });\n    \n                        \n        //                 frm.refresh_field(\"custom_asset_allocation\");\n        //             }\n        //         }\n        //         });\n        // }\n       \n    },\n    custom_handover_template: function(frm){\n        if (frm.doc.custom_handover_template){\n            frappe.db.get_doc('HandOver Template', frm.doc.custom_handover_template)\n                .then(template_doc => {\n                   \n                    const tasks = template_doc.handover_task || []; \n\n                    \n                    frm.clear_table('custom_handover_details'); \n\n                    \n                    tasks.forEach(task => {\n                        const new_row = frm.add_child('custom_handover_details'); \n                        new_row.task = task.task; \n                        new_row.department = task.department; \n                    });\n\n                \n                    frm.refresh_field('custom_handover_details'); \n                })\n                .catch(err => {\n                    console.error(\"Error fetching template data: \", err);\n                });\n        }\n    }\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Exit Interview",
  "enabled": 1,
  "modified": "2024-10-15 10:13:17.093104",
  "module": "SMK HRMS",
  "name": "Set default Exit Questionnaire doctype",
  "script": "frappe.ui.form.on('Exit Interview', {\n\trefresh(frm) {\n\t   frm.set_value('ref_doctype', 'Exit Questionnaire');\n\t   frm.refresh_field('Exit Questionnaire');\n\t\t\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Exit Questionnaire",
  "enabled": 1,
  "modified": "2024-10-15 10:13:17.053737",
  "module": "SMK HRMS",
  "name": "Set question in exit questionnarie",
  "script": "frappe.ui.form.on('Exit Questionnaire', {\n    exit_questionnarie_template: function(frm) {\n        if (frm.doc.exit_questionnarie_template) {\n            frappe.db.get_doc('Exit Questionnarie Template', frm.doc.exit_questionnarie_template)\n                .then(template_doc => {\n                    const que1 = template_doc.questions || [];\n                    const que2 = template_doc.additional_questions || [];\n\n                    frm.clear_table('exit_question_table_1');\n                    frm.clear_table('exit_question_table_2');\n\n                    que1.forEach(question1 => {\n                        const new_row = frm.add_child('exit_question_table_1'); // Correct usage\n                        new_row.area = question1.area; \n                        new_row.question = question1.question; \n                        new_row.strongly_agree = question1.strongly_agree;\n                        new_row.agree = question1.agree;\n                        new_row.disagree = question1.disagree;\n                        new_row.strongly_disagree = question1.strongly_disagree;\n                        new_row.comments = question1.comments;\n                    });\n\n                    que2.forEach(que => {\n                        const new_row = frm.add_child('exit_question_table_2'); // Correct usage\n                        new_row.question = que.question; \n                        new_row.answer = que.answer; \n                    });\n\n                    frm.refresh_field('exit_question_table_1');\n                    frm.refresh_field('exit_question_table_2');\n                })\n                .catch(err => {\n                    console.error(\"Error fetching template data: \", err);\n                });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2025-01-06 12:15:30.575854",
  "module": "SMK HRMS",
  "name": "Calculate Shifthours",
  "script": "frappe.ui.form.on('Shift Type', {\nstart_time: function (cur_frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    var hours=0;\n    var minutes=0;\n    var seconds=0;\n    console.log(cdt, cdn, d.start_time, d.end_time, d.custom_shift_hours);\n\n    if (d.start_time && d.end_time) {\n        \n\t\t\n\t    var hour1 = d.start_time.split(':')[0];\n        var hour2 = d.end_time.split(':')[0];\n        var min1 = d.start_time.split(':')[1];\n        var min2 = d.end_time.split(':')[1];\n\t\tvar sec1 = d.start_time.split(':')[2];\n        var sec2 = d.end_time.split(':')[2];\n\t\t\n\t\tvar diff_hour = hour2 - hour1;\n\t\tvar diff_min = min2 - min1;\n\t\tvar diff_sec = sec2 - sec1;\n\t\t\n\t\tif (diff_hour<0) {\n            diff_hour+= 24;\n        }\n        if (diff_min<0) {\n            diff_min+=60;\n            diff_hour--;\n        }if(diff_min>=60){\n            diff_min-=60;\n            diff_hour++;\n        }\n        if (diff_sec<0) {\n            diff_sec+=60;\n            diff_min--;\n        } else if(diff_sec>=60){\n            diff_sec-=60;\n            diff_min++;\n        }\n\t\n        \n       frappe.model.set_value(cdt,cdn,\"custom_shift_hours\",diff_hour+\":\"+diff_min+\":\"+diff_sec);\n\t   frm.refresh_field(\"custom_shift_hours\");\n    }\n},\nend_time: function (cur_frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    var hours=0;\n    var minutes=0;\n    var seconds=0;\n    console.log(cdt, cdn, d.start_time, d.end_time, d.custom_shift_hours);\n\n    if (d.start_time && d.end_time) {\n        \n\t\t\n\t    var hour1 = d.start_time.split(':')[0];\n        var hour2 = d.end_time.split(':')[0];\n        var min1 = d.start_time.split(':')[1];\n        var min2 = d.end_time.split(':')[1];\n\t\tvar sec1 = d.start_time.split(':')[2];\n        var sec2 = d.end_time.split(':')[2];\n\t\t\n\t\tvar diff_hour = hour2 - hour1;\n\t\tvar diff_min = min2 - min1;\n\t\tvar diff_sec = sec2 - sec1;\n\t\t\n\t\tif (diff_hour<0) {\n            diff_hour+= 24;\n        }\n        if (diff_min<0) {\n            diff_min+=60;\n            diff_hour--;\n        }if(diff_min>=60){\n            diff_min-=60;\n            diff_hour++;\n        }\n        if (diff_sec<0) {\n            diff_sec+=60;\n            diff_min--;\n        } else if(diff_sec>=60){\n            diff_sec-=60;\n            diff_min++;\n        }\n\t\t\n      frappe.model.set_value(cdt,cdn,\"custom_shift_hours\",diff_hour+\":\"+diff_min+\":\"+diff_sec);\n\t   frm.refresh_field(\"custom_shift_hours\");\n    }\n}\n\n\n});",
  "view": "Form"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2025-01-09 11:42:49.205839",
  "module": "SMK HRMS",
  "name": "Custom attendance via Get attendance button",
  "script": "frappe.ui.form.on('Shift Type', {\n\trefresh:function(frm) {\n\n    // Hide Default Mark Attendance Button\n    $('[data-label=\"Mark%20Attendance\"]').hide();\n    \n    \n    frm.add_custom_button(__(\"Get Attendance\"), function() {\n        var from_date = frm.doc.process_attendance_after;\n        var shift = frm.doc.name;\n        var shift_type = frm.doc.type;\n        var batchSize = 3; \n\n        \n        frappe.call({\n            method: \"smk_hrms.utils.mark_attendance\",\n            args: {\n                \"date\": from_date,\n                \"shift\": shift,\n                freeze: true,\n                freeze_message: \"Please wait ..\"\n            },\n            callback: function(r) {\n                console.log(r)\n                // var res = r.message;\n                // res.forEach(function(message) {\n                //     frappe.msgprint(message);\n                // });\n               \n            }\n        });\n    });\n\t},\n\tprocess_attendance_after: function(frm) {\n        frm.save();\n    }\n\t\n});\n\n",
  "view": "Form"
 }
]