[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-24 12:51:03.234991",
  "module": "SMK HRMS",
  "name": "Not allowed to Create/Update interview against 'Closed' Job Opening",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Interview",
  "script": "if doc.job_opening:\n    job_opening_doc = frappe.get_doc('Job Opening', doc.job_opening)\n    job_opening_link = frappe.utils.get_link_to_form('Job Opening', doc.job_opening)\n    if job_opening_doc.status == 'Closed':\n        frappe.throw(f'Can not create Interview against closed Job Opening: {job_opening_link}')\n       \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-24 12:51:03.251105",
  "module": "SMK HRMS",
  "name": "Not allowed to Create/Update Job Offer against 'Closed' Job Opening",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Offer",
  "script": "if doc.custom_job_opening:\n    job_opening_doc = frappe.get_doc('Job Opening', doc.custom_job_opening)\n    job_opening_link = frappe.utils.get_link_to_form('Job Opening', doc.custom_job_opening)\n    if job_opening_doc.status == 'Closed':\n        frappe.throw(f'Can not create Job Offer against closed Job Opening: {job_opening_link}')\n       \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-26 15:42:22.222389",
  "module": "SMK HRMS",
  "name": "Update Hired vacancy in job opening is submitted",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Offer",
  "script": "if doc.status == 'Accepted':\n    opening = doc.custom_job_opening\n    \n    job_requisition = frappe.db.get_value('Job Opening', opening, 'job_requisition')\n    vacancy_field = 'vacancies' if job_requisition else 'planned_vacancies'\n    \n    vacancy = frappe.db.get_value('Job Opening', opening, vacancy_field)\n    staffing_plan = frappe.db.get_value('Job Opening', opening, 'staffing_plan')\n    \n    hired_vacancy = frappe.db.count('Job Offer', {'docstatus': 1, 'status': 'Accepted', 'custom_job_opening': opening})\n        \n    frappe.db.set_value('Job Opening', opening, 'custom_hired_vacancy', hired_vacancy)\n    \n    designation = frappe.db.get_value('Job Opening', opening, 'designation')\n    \n    if staffing_plan:\n        plan_doc = frappe.get_doc('Staffing Plan', staffing_plan)\n        plan_child = plan_doc.get(\"staffing_details\")\n       \n        for child in plan_child:\n            if child.designation == designation:\n                child.custom_hired_vacancy = hired_vacancy\n                child.save()\n        \n    if vacancy == hired_vacancy:\n        # closing_date = frappe.utils.today()\n        frappe.db.set_value('Job Opening', opening, 'status', 'Closed')\n        frappe.db.set_value('Job Opening', opening, 'publish', 0)\n        \n    if job_requisition and vacancy == hired_vacancy:\n        frappe.db.set_value('Job Requisition', job_requisition, 'status', 'Filled')\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-26 15:46:20.607538",
  "module": "SMK HRMS",
  "name": "Update Hired vacancy in job opening is cancelled",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Offer",
  "script": "if doc.status=='Accepted':\n    opening = doc.custom_job_opening\n    staffing_plan = frappe.db.get_value('Job Opening', opening, 'staffing_plan')\n    designation = frappe.db.get_value('Job Opening', opening, 'designation')\n    \n    job_requisition = frappe.db.get_value('Job Opening', opening, 'job_requisition')\n    vacancy = frappe.db.get_value('Job Opening', opening, 'custom_hired_vacancy')\n    plan = frappe.db.get_value('Job Opening', opening, 'staffing_plan')\n    \n    new_vacancy = int(vacancy)-1\n    \n    frappe.db.set_value('Job Opening', opening, 'custom_hired_vacancy', new_vacancy)\n    frappe.db.set_value('Job Opening', opening, 'status', 'Open')\n    frappe.db.set_value('Job Opening', opening, 'publish', 1)\n    \n    frappe.db.set_value('Job Applicant', doc.job_appliant, 'status', 'Open')\n    \n    if staffing_plan:\n        plan_doc = frappe.get_doc('Staffing Plan', staffing_plan)\n        plan_child = plan_doc.get(\"staffing_details\")\n       \n        for child in plan_child:\n            if child.designation == designation:\n                child.custom_hired_vacancy = new_vacancy\n                child.save()\n    \n    \n    if job_requisition:\n        frappe.db.set_value('Job Requisition', job_requisition, 'status', 'Open & Approved')\n    \n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-25 18:52:31.294942",
  "module": "SMK HRMS",
  "name": "Set Full name in Employee Profile",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Employee Profile",
  "script": "first_name = doc.first_name or ''\nmiddle_name = doc.middle_name or ''\nlast_name = doc.last_name or ''\n\nif first_name or middle_name or last_name:\n    doc.full_name = f\"{first_name} {middle_name} {last_name}\"\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "update_employee",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-08 17:52:04.090587",
  "module": "SMK HRMS",
  "name": "Update Employee details from employee profile",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "name = frappe.form_dict.get(\"name\")\nemp_profile = frappe.get_doc('Employee Profile', name)\n\n\nnominee_details = emp_profile.get('pf_nominee_details')\nnominee_child = []\n\n\nif nominee_details:\n    for nominee in nominee_details:\n        nominee_child.append({\n            'name1': nominee.get('name1'),\n            'address': nominee.get('address'),\n            'relation': nominee.get('relation'),\n            'date_of_birth': frappe.utils.formatdate(nominee.get(\"date_of_birth\"), 'yyyy-mm-dd'), \n            'amount_share_of_pf': nominee.get(\"amount_share_of_pf\"),\n            'name_address_of_guardian_if_the_nominee_is_minor': nominee.get(\"name_address_of_guardian_if_the_nominee_is_minor\")\n        })\n\n\neducation_details = emp_profile.get('educational_qualification')\neducation_child = []\n\nif education_details:\n    for education in education_details:\n        education_child.append({\n            'school_univ': education.get('school_univ'),\n            'qualification': education.get('qualification'),\n            'level': education.get('level'),\n            'year_of_passing': education.get(\"year_of_passing\"),\n            'class_per': education.get(\"class_per\"),\n            'maj_opt_subj': education.get(\"maj_opt_subj\")\n        })\n\n\nwork_details = emp_profile.get('previous_work_experience')\nwork_child = []\n\nif work_details:\n    for work in work_details:\n        work_child.append({\n            'company_name': work.get('company_name'),\n            'designation': work.get('designation'),\n            'salary': work.get('salary'),\n            'address': work.get(\"address\"),\n            'contact': work.get(\"contact\"),\n            'total_experience': work.get(\"total_experience\")\n        })\n\n\nexis_emp = frappe.db.get_value('Employee', {'custom_employee_profile': name}, 'name')\n\nif exis_emp:\n    exis_emp_doc = frappe.get_doc(\"Employee\", exis_emp)\n\n    # Clear existing fields in the child tables\n    exis_emp_doc.set('custom_pf_nominee_details', [])  \n    exis_emp_doc.set('education', [])  \n    exis_emp_doc.set('external_work_history', [])  \n    \n    # Update child tables with new data from Employee Profile\n    if nominee_child:\n        for nominee in nominee_child:\n            exis_emp_doc.append('custom_pf_nominee_details', nominee)\n\n    if education_child:\n        for education in education_child:\n            exis_emp_doc.append('education', education)\n\n    if work_child:\n        for work in work_child:\n            exis_emp_doc.append('external_work_history', work)\n\n    # Correctly assign fields without commas\n    exis_emp_doc.first_name = emp_profile.get('first_name')\n    exis_emp_doc.middle_name = emp_profile.get('middle_name')\n    exis_emp_doc.last_name = emp_profile.get('last_name')\n    exis_emp_doc.employee_name = emp_profile.get('full_name')\n    exis_emp_doc.gender = emp_profile.get('gender')\n    exis_emp_doc.date_of_birth = emp_profile.get('date_of_birth')\n    exis_emp_doc.date_of_joining = emp_profile.get('date_of_joining')\n    exis_emp_doc.cell_number = emp_profile.get('mobile')\n    exis_emp_doc.current_address = emp_profile.get('current_address')\n    exis_emp_doc.personal_email = emp_profile.get('email')\n    exis_emp_doc.emergency_phone_number = emp_profile.get('emergency_contact_no')\n    exis_emp_doc.custom_aadhaar_no = emp_profile.get('aadhaar_no')\n    exis_emp_doc.pan_number = emp_profile.get('pan_no')\n    exis_emp_doc.passport_number = emp_profile.get('passport_no')\n    exis_emp_doc.marital_status = emp_profile.get('marital_status')\n    exis_emp_doc.blood_group = emp_profile.get('blood_group')\n    exis_emp_doc.family_background = emp_profile.get('family_background')\n    exis_emp_doc.resignation_letter_date = emp_profile.get('resignation_date')\n    exis_emp_doc.reason_for_leaving = emp_profile.get('reason_for_leaving')\n    exis_emp_doc.feedback = emp_profile.get('feedback')\n    \n  \n    exis_emp_doc.save()\n\n\n\n    \nelse:\n    new_employee = frappe.get_doc({\n        'doctype': 'Employee',\n        'first_name': emp_profile.get('first_name'),\n        'middle_name': emp_profile.get('middle_name'),\n        'last_name': emp_profile.get('last_name'),\n        'employee_name': emp_profile.get('full_name'),\n        'gender': emp_profile.get('gender'),\n        'date_of_birth': emp_profile.get('date_of_birth'),\n        'date_of_joining': emp_profile.get('date_of_joining'),\n        'custom_employee_profile': emp_profile.get('name'),\n        'cell_number': emp_profile.get('mobile'),\n        'current_address': emp_profile.get('current_address'),\n        'personal_email': emp_profile.get('email'),\n        'emergency_phone_number': emp_profile.get('emergency_contact_no'),\n        'custom_aadhaar_no': emp_profile.get('aadhaar_no'),\n        'pan_number': emp_profile.get('pan_no'),\n        'passport_number': emp_profile.get('passport_no'),\n        'marital_status': emp_profile.get('marital_status'),\n        'blood_group': emp_profile.get('blood_group'),\n        'family_background': emp_profile.get('family_background'),\n        'resignation_letter_date': emp_profile.get('resignation_date'),\n        'reason_for_leaving': emp_profile.get('reason_for_leaving'),\n        'feedback': emp_profile.get('feedback'),\n        'custom_pf_nominee_details': nominee_child,\n        'education': education_child,  \n        'external_work_history': work_child  \n    })\n    \n    new_employee.insert()\n    frappe.db.commit()\n",
  "script_type": "API"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-31 17:51:43.860792",
  "module": "SMK HRMS",
  "name": "Earned Leave allocation for Sick Leave",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Leave Policy Assignment",
  "script": "effective_from_date = doc.effective_from\neffective_to_date = doc.effective_to\ncurrent_date = frappe.utils.getdate(frappe.utils.nowdate())\n\n\n#Fetch all the leave allocations of employee for this leave policy\nleave_allocation = frappe.db.get_all('Leave Allocation',\n    filters={\n        'employee': doc.employee,\n        'leave_policy_assignment': doc.name\n    },\n    fields=['name', 'leave_type']\n)\n\n# Fetch the leave policy document\nleave_policy_doc = frappe.get_doc('Leave Policy', doc.leave_policy)\n\nif leave_policy_doc:\n    leave_policy_child = leave_policy_doc.get(\"leave_policy_details\")\n    \n    for leave in leave_policy_child:\n        leave_type = leave.leave_type\n        annual_allocation = leave.annual_allocation\n        \n        leave_type_doc = frappe.get_doc('Leave Type', leave_type)\n        \n        is_sick_leave = leave_type_doc.get(\"custom_is_sick_leave\")\n        frequency = leave_type_doc.get(\"earned_leave_frequency\")\n        allocate_on_day = leave_type_doc.get(\"allocate_on_day\")\n        monthly_allocation = float(leave_type_doc.get(\"custom_monthly_allocation_for_sick_leave\", 0))  # Ensure it's float\n        last_month_allocation = leave_type_doc.get(\"custom_monthly_allocation_for_last_month\")\n        \n        if effective_from_date and effective_to_date and is_sick_leave == 1 and frequency == \"Monthly\":\n            # Calculate the total number of months\n            start_date = frappe.utils.getdate(effective_from_date)\n            end_date = frappe.utils.getdate(effective_to_date)\n            total_months = (end_date.year - start_date.year) * 12 + (end_date.month - start_date.month) + 1\n            \n            # frappe.msgprint(f\"Total Months: {total_months}\")\n            \n            \n            past_month_leave = 0\n            past_months = 0 \n            \n      \n            last_day_of_current_month = frappe.utils.get_last_day(current_date)\n            \n            # Check if the current month is the last month in the given date range\n            is_last_month = (current_date.year == end_date.year and current_date.month == end_date.month)\n            \n            \n            if is_last_month==True:\n                if allocate_on_day == 'First Day':\n                    first_day_of_last_month = frappe.utils.get_first_day(last_day_of_current_month.replace(month=current_date.month))\n                    if current_date >= first_day_of_last_month:\n                        past_months = (current_date.year - start_date.year) * 12 + (current_date.month - start_date.month)\n                        past_month_leave = (past_months * monthly_allocation) + last_month_allocation\n        \n                        \n                elif allocate_on_day == 'Last Day': \n                    last_day_of_last_month = frappe.utils.get_last_day(last_day_of_current_month.replace(month=current_date.month))\n                    if current_date >= last_day_of_last_month:\n                        past_months = (current_date.year - start_date.year) * 12 + (current_date.month - start_date.month)\n                        past_month_leave = (past_months * monthly_allocation) + last_month_allocation\n                    else:\n                        if current_date < last_day_of_current_month:\n                            past_months = (current_date.year - start_date.year) * 12 + (current_date.month - start_date.month)\n                        else:\n                            past_months = (current_date.year - start_date.year) * 12 + (current_date.month - start_date.month) + 1\n                        \n                        past_month_leave = past_months * monthly_allocation\n                \n                \n                        \n            else:\n                if allocate_on_day == 'First Day':\n                    if current_date >= start_date:\n                        past_months = (current_date.year - start_date.year) * 12 + (current_date.month - start_date.month) + 1\n                        past_month_leave = past_months * monthly_allocation\n            \n                \n                elif allocate_on_day == 'Last Day':\n                    if current_date > start_date:\n                    \n                        last_day_of_current_month = frappe.utils.get_last_day(current_date)\n                       \n                        if current_date < last_day_of_current_month:\n                            past_months = (current_date.year - start_date.year) * 12 + (current_date.month - start_date.month)\n                        else:\n                            past_months = (current_date.year - start_date.year) * 12 + (current_date.month - start_date.month) + 1\n                        \n                        past_month_leave = past_months * monthly_allocation\n                        \n                \n            # frappe.msgprint(f\"Past Months: {past_months}, Monthly Allocation: {monthly_allocation}, Past Month Leave: {past_month_leave}\")\n            \n            \n            if leave_allocation:\n                for leave_all in leave_allocation:\n                    leave_all_type = leave_all.leave_type\n                    leave_all_type_doc = frappe.get_doc('Leave Type', leave_all_type)\n                    if leave_all_type_doc.get('custom_is_sick_leave')==1:\n                        frappe.db.set_value('Leave Allocation', leave_all.name, 'new_leaves_allocated', past_month_leave)\n                        frappe.db.set_value('Leave Allocation', leave_all.name, 'total_leaves_allocated', past_month_leave)\n                        \n                        leave_ledger = frappe.db.get_value('Leave Ledger Entry', {'transaction_name': leave_all.name}, ['name'])\n                        if leave_ledger:\n                            frappe.db.set_value('Leave Ledger Entry', leave_ledger, 'leaves', past_month_leave)\n            \n            \n            \n            \n            \n    ",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-31 17:52:15.388639",
  "module": "SMK HRMS",
  "name": "Update Salary Slip - For Employer Contribution Customization",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Salary Slip",
  "script": "doc.save()",
  "script_type": "DocType Event"
 }
]